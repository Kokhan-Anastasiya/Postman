{
	"info": {
		"_postman_id": "df8a8144-73c9-45c9-ba15-c64a39d7b8b1",
		"name": "HW from Ksendzov Course",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20478841"
	},
	"item": [
		{
			"name": "get_method",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}get_method?name={{name}}&age={{age}}",
					"host": [
						"{{url}}get_method"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_1",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_1?name={{name}}&age={{age}}&weight={{weight}}",
					"host": [
						"{{url}}object_info_1"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "weight",
							"value": "{{weight}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_2",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_2?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Correct string in body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test (\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test (\"Correct string in body\", function() {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Nastya",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}first",
					"host": [
						"{{url}}first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code 200\", function() {\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"let response = pm.response.json();\r",
							"console.log(response)\r",
							"//Проверить, что name в ответе равно name из request (name вбить руками.)\r",
							"pm.test(\"Comparison of name parameters\", function() {\r",
							"    pm.expect(response.name).to.be.eql(\"Nastya\")\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age из request (age вбить руками.)\r",
							"pm.test(\"Comparison of age parameters\", function() {\r",
							"    pm.expect(response.age).to.be.eql(\"32\")\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary из request (salary вбить руками.)\r",
							"pm.test(\"Comparison of salary parameters\", function() {\r",
							"    pm.expect(response.salary).to.be.eql(1500)\r",
							"});\r",
							"\r",
							"// Спарсить request.\r",
							"let req = request.data\r",
							"console.log(req)\r",
							"// Проверить, что name в ответе равно name из request (name забрать из request.)\r",
							"pm.test(\"Comparison of name parameters2\", function(){\r",
							"    pm.expect(response.name).to.be.eql(req.name)\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Comparison of age parameters2\", function(){\r",
							"    pm.expect(response.age).to.be.eql(req.age)\r",
							"});\r",
							"// Проверить, что salary в ответе равно salary из request (salary забрать из request.)\r",
							"pm.test(\"Comparison of salary parameters2\", function(){\r",
							"    pm.expect(response.salary).to.be.eql(+req.salary)\r",
							"});\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(response.family)\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"1_5 year salary is equal to salary*4\", function(){\r",
							"    pm.expect(response.family.u_salary_1_5_year).to.be.eql(req.salary*4)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3.1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let response = pm.response.json();\r",
							"console.log(response);\r",
							"\r",
							"// Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"console.log(req);\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Comparison of name parameters\", function(){\r",
							"    pm.expect(response.name).to.be.eql(req.name)\r",
							"})\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Comparison of age parameters\", function(){\r",
							"    pm.expect(response.age).to.be.eql(req.age)\r",
							"})\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Comparison of salary parameters\", function(){\r",
							"    pm.expect(response.salary).to.be.eql(+req.salary)\r",
							"})\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(response.family\r",
							")\r",
							"// Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Check that dog has parameter name\", function(){\r",
							"    pm.expect(response.family.pets.dog).to.have.property(\"name\")\r",
							"})\r",
							"// Проверить, что у параметра dog есть параметры age.\r",
							" pm.test(\"Check that dog has parameter name\", function(){\r",
							"     pm.expect(response.family.pets.dog).to.have.property(\"age\")\r",
							" })\r",
							"// Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check that dog has name Lucky\", function(){\r",
							"     pm.expect(response.family.pets.dog.name).to.be.eql(\"Luky\")\r",
							" })\r",
							"// Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"Check that parameter age is equal to 4\", function(){\r",
							"     pm.expect(response.family.pets.dog.age).to.be.eql(4)\r",
							" })"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_3?name={{name}}&age={{age}}&salary={{saalry}}",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{saalry}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4.1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"let response = pm.response.json()\r",
							"console.log(response)\r",
							"// Спарсить request\r",
							"let req = pm.request.url.query.toObject();\r",
							"console.log(req)\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Comparison of name parameters\", function(){\r",
							"    pm.expect(response.name).to.be.eql(req.name)\r",
							"})\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Comparison of age parameters\", function(){\r",
							"    pm.expect(response.age).to.be.eql(+req.age)\r",
							"})\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(response.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(response.salary[0])\r",
							"\r",
							"// // 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response\r",
							"console.log(response.salary[1])\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"console.log(response.salary[2])\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Comparison of salary parameters\", function(){\r",
							"    pm.expect(response.salary[0]).to.be.eql(+req.salary)\r",
							"})\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Comparison of salary parameters\", function(){\r",
							"    pm.expect(+response.salary[1]).to.be.eql(req.salary*2)\r",
							"})\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Comparison of salary parameters\", function(){\r",
							"    pm.expect(+response.salary[2]).to.be.eql(req.salary*3)\r",
							"})\r",
							"//15. Создать в окружении переменную name, передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"Nastya\");\r",
							"// 16. Создать в окружении переменную age, передать в окружение переменную age\r",
							"pm.environment.set(\"age\", \"32\");\r",
							"// 17. Создать в окружении переменную salary, передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", \"1500\");\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"let sal = response.salary\r",
							"for (let property in sal) {\r",
							"  console.log(`${property}: ${sal[property]}`)};\r",
							"\r",
							"//Variant 2:\r",
							"let sal1 = response.salary;\r",
							"\r",
							"for (let element of sal1) {\r",
							"  console.log(element)\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2.1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"let response = pm.response.json()\r",
							"console.log(response)\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data\r",
							"console.log(req)\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Json response имеет параметр start_qa_salary\", function() {\r",
							"    pm.expect(response).to.have.property(\"start_qa_salary\")\r",
							"})\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Json response имеет параметр qa_salary_after_6_months\", function() {\r",
							"    pm.expect(response).to.have.property(\"qa_salary_after_6_months\")\r",
							"})\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Json response имеет параметр qa_salary_after_12_months\", function() {\r",
							"    pm.expect(response).to.have.property(\"qa_salary_after_12_months\")\r",
							"})\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Json response имеет параметр qa_salary_after_1.5_years\", function() {\r",
							"    pm.expect(response).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"})\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Json response имеет параметр qa_salary_after_3.5_years\", function() {\r",
							"    pm.expect(response).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"})\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Json response имеет параметр person\", function() {\r",
							"    pm.expect(response).to.have.property(\"person\")\r",
							"})\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Параметр start_qa_salary равен salary из request\", function() {\r",
							"    pm.expect(response.start_qa_salary).to.be.eql(+req.salary)\r",
							"})\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Параметр qa_salary_after_6_months равен salary*2 из request\", function() {\r",
							"    pm.expect(response.qa_salary_after_6_months).to.be.eql(+req.salary*2)\r",
							"})\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Параметр qa_salary_after_12_months равен salary*2.7 из request\", function() {\r",
							"    pm.expect(response.qa_salary_after_12_months).to.be.eql(+req.salary*2.7)\r",
							"})\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Параметр qa_salary_after_1.5_year равен salary*3.3 из request\", function() {\r",
							"    pm.expect(response[\"qa_salary_after_1.5_year\"]).to.be.eql(+req.salary*3.3)\r",
							"})\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Параметр qa_salary_after_3.5_years равен salary*3.8 из request\", function() {\r",
							"    pm.expect(response[\"qa_salary_after_3.5_years\"]).to.be.eql(+req.salary*3.8)\r",
							"})\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"В параметре person, 1-й элемент из u_name равен salary из request\", function() {\r",
							"    pm.expect(response.person.u_name[1]).to.be.eql(+req.salary)\r",
							"})\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Параметр u_age равен age из request\", function() {\r",
							"    pm.expect(response.person.u_age).to.be.eql(+req.age)\r",
							"})\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Параметр u_salary_5_years равен salary*4.2 из request\", function() {\r",
							"    pm.expect(response.person.u_salary_5_years).to.be.eql(+req.salary*4.2)\r",
							"})\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"let pers = response.person;\r",
							"\r",
							"for (let property in pers) {\r",
							"  console.log(`${property}: ${pers[property]}`);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authorization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json()\r",
							"console.log(response)\r",
							"\r",
							"pm.environment.set(\"token\", response.access_token);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "qwerty",
							"type": "string"
						},
						{
							"key": "username",
							"value": "qwerty",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}login",
					"host": [
						"{{url}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "User info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let response = pm.response.json();\r",
							"\r",
							"// 2) Проверка структуры json в ответе\r",
							"let schema = {\r",
							"    \r",
							"    \"$id\": \"http://example.com/example.json\",\r",
							"    \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"required\": [\r",
							"        \"person\",\r",
							"        \"qa_salary_after_12_months\",\r",
							"        \"qa_salary_after_6_months\",\r",
							"        \"start_qa_salary\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"person\": {\r",
							"            \"type\": \"object\",\r",
							"            \"default\": {},\r",
							"            \"title\": \"The person Schema\",\r",
							"            \"required\": [\r",
							"                \"u_age\",\r",
							"                \"u_name\",\r",
							"                \"u_salary_1_5_year\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                \"u_age\": {\r",
							"                    \"type\": \"integer\",\r",
							"                    \"default\": 0,\r",
							"                    \"title\": \"The u_age Schema\",\r",
							"                    \"examples\": [\r",
							"                        32\r",
							"                    ]\r",
							"                },\r",
							"                \"u_name\": {\r",
							"                    \"type\": \"array\",\r",
							"                    \"default\": [],\r",
							"                    \"title\": \"The u_name Schema\",\r",
							"                    \"items\": {\r",
							"                        \"anyOf\": [{\r",
							"                            \"type\": \"string\",\r",
							"                            \"default\": \"\",\r",
							"                            \"title\": \"A Schema\",\r",
							"                            \"examples\": [\r",
							"                                \"Nastya\"\r",
							"                            ]\r",
							"                        },\r",
							"                        {\r",
							"                            \"type\": \"integer\",\r",
							"                            \"title\": \"A Schema\",\r",
							"                            \"examples\": [\r",
							"                                1500,\r",
							"                                32\r",
							"                            ]\r",
							"                        }]\r",
							"                    },\r",
							"                    \"examples\": [\r",
							"                        [\"Nastya\",\r",
							"                            1500,\r",
							"                            32\r",
							"                        ]\r",
							"                    ]\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\r",
							"                    \"type\": \"integer\",\r",
							"                    \"default\": 0,\r",
							"                    \"title\": \"The u_salary_1_5_year Schema\",\r",
							"                    \"examples\": [\r",
							"                        6000\r",
							"                    ]\r",
							"                }\r",
							"            },\r",
							"            \"examples\": [{\r",
							"                \"u_age\": 32,\r",
							"                \"u_name\": [\r",
							"                    \"Nastya\",\r",
							"                    1500,\r",
							"                    32\r",
							"                ],\r",
							"                \"u_salary_1_5_year\": 6000\r",
							"            }]\r",
							"        },\r",
							"        \"qa_salary_after_12_months\": {\r",
							"            \"type\": \"number\",\r",
							"            \"default\": 0.0,\r",
							"            \"title\": \"The qa_salary_after_12_months Schema\",\r",
							"            \"examples\": [\r",
							"                4350.0\r",
							"            ]\r",
							"        },\r",
							"        \"qa_salary_after_6_months\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"default\": 0,\r",
							"            \"title\": \"The qa_salary_after_6_months Schema\",\r",
							"            \"examples\": [\r",
							"                3000\r",
							"            ]\r",
							"        },\r",
							"        \"start_qa_salary\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"default\": 0,\r",
							"            \"title\": \"The start_qa_salary Schema\",\r",
							"            \"examples\": [\r",
							"                1500\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"examples\": [{\r",
							"        \"person\": {\r",
							"            \"u_age\": 32,\r",
							"            \"u_name\": [\r",
							"                \"Nastya\",\r",
							"                1500,\r",
							"                32\r",
							"            ],\r",
							"            \"u_salary_1_5_year\": 6000\r",
							"        },\r",
							"        \"qa_salary_after_12_months\": 4350.0,\r",
							"        \"qa_salary_after_6_months\": 3000,\r",
							"        \"start_qa_salary\": 1500\r",
							"    }]\r",
							"}\r",
							"\r",
							"  pm.test(\"Проверить структуру json схемы\", function () {\r",
							"      pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"// resp: \r",
							"// {'start_qa_salary':salary,\r",
							"//  'qa_salary_after_6_months': salary * 2,\r",
							"//  'qa_salary_after_12_months': salary * 2.9,\r",
							"//  'person': {'u_name':[user_name, salary, age],\r",
							"//             'u_age':age,\r",
							"//             'u_salary_1.5_year': salary * 4}\r",
							"//}\r",
							"pm.test(\"Проверить коэффициенты умножения\", function () {\r",
							"      pm.expect(response.qa_salary_after_6_months).to.be.eql(response.start_qa_salary*2);\r",
							"      pm.expect(response.qa_salary_after_12_months).to.be.eql(response.start_qa_salary*2.9);\r",
							"      pm.expect(response.person.u_salary_1_5_year).to.be.eql(response.start_qa_salary*4);\r",
							"});\r",
							"// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"\r",
							"let salary_1_5 = response.person.u_salary_1_5_year\r",
							"\r",
							"pm.environment.set(\"salary_1_5\", response.person.u_salary_1_5_year);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"age\": {{age}},\r\n\"salary\": {{salary}},\r\n\"name\": \"{{name}}\",\r\n\"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info",
					"host": [
						"{{url}}user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"let schema = {\r",
							"    \"$id\": \"http://example.com/example.json\",\r",
							"    \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"name\",\r",
							"        \"salary\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"default\": 0,\r",
							"            \"title\": \"The age Schema\",\r",
							"            \"examples\": [\r",
							"                32\r",
							"            ]\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The name Schema\",\r",
							"            \"examples\": [\r",
							"                \"Nastya\"\r",
							"            ]\r",
							"        },\r",
							"        \"salary\": {\r",
							"            \"type\": \"array\",\r",
							"            \"default\": [],\r",
							"            \"title\": \"The salary Schema\",\r",
							"            \"items\": {\r",
							"                \"anyOf\": [{\r",
							"                    \"type\": \"integer\",\r",
							"                    \"default\": 0,\r",
							"                    \"title\": \"A Schema\",\r",
							"                    \"examples\": [\r",
							"                        1500\r",
							"                    ]\r",
							"                },\r",
							"                {\r",
							"                    \"type\": \"string\",\r",
							"                    \"title\": \"A Schema\",\r",
							"                    \"examples\": [\r",
							"                        \"3000\",\r",
							"                        \"4500\"\r",
							"                    ]\r",
							"                }]\r",
							"            },\r",
							"            \"examples\": [\r",
							"                [1500,\r",
							"                    \"3000\",\r",
							"                    \"4500\"\r",
							"                ]\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"examples\": [{\r",
							"        \"age\": 32,\r",
							"        \"name\": \"Nastya\",\r",
							"        \"salary\": [\r",
							"            1500,\r",
							"            \"3000\",\r",
							"            \"4500\"\r",
							"        ]\r",
							"    }]\r",
							"}\r",
							"\r",
							"pm.test(\"Проверить структуру json схемы\", function () {\r",
							"      pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"// Resp: {'name':name,\r",
							"//   'age': int(age),\r",
							"//   'salary': [salary, str(salary*2), str(salary*3)]}\r",
							"\r",
							"pm.test(\"Проверить коэффициенты умножения\", function () {\r",
							"      pm.expect(+response.salary[1]).to.be.eql(response.salary[0]*2);\r",
							"      pm.expect(+response.salary[2]).to.be.eql(response.salary[0]*3);\r",
							"});\r",
							"\r",
							"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test(\"Проверить что 2-й элемент массива salary больше 1-го и 0-го\", function () {\r",
							"     pm.expect(+response.salary[2]) > (response.salary[0])\r",
							"     pm.expect(+response.salary[2]) > (response.salary[1]);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/new_data",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test pet info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Resp:\r",
							"// {'name': name,\r",
							"//  'age': age,\r",
							"//  'daily_food':weight * 0.012,\r",
							"//  'daily_sleep': weight * 2.5}\r",
							"\r",
							"\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let response = pm.response.json()\r",
							"let req = request.data\r",
							"console.log(req)\r",
							"// 2) Проверка структуры json в ответе.\r",
							"\r",
							"let schema = {\r",
							"    \"$id\": \"http://example.com/example.json\",\r",
							"    \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"daily_food\",\r",
							"        \"daily_sleep\",\r",
							"        \"name\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"default\": 0,\r",
							"            \"title\": \"The age Schema\",\r",
							"            \"examples\": [\r",
							"                32\r",
							"            ]\r",
							"        },\r",
							"        \"daily_food\": {\r",
							"            \"type\": \"number\",\r",
							"            \"default\": 0.0,\r",
							"            \"title\": \"The daily_food Schema\",\r",
							"            \"examples\": [\r",
							"                0.648\r",
							"            ]\r",
							"        },\r",
							"        \"daily_sleep\": {\r",
							"            \"type\": \"number\",\r",
							"            \"default\": 0.0,\r",
							"            \"title\": \"The daily_sleep Schema\",\r",
							"            \"examples\": [\r",
							"                135.0\r",
							"            ]\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The name Schema\",\r",
							"            \"examples\": [\r",
							"                \"Nastya\"\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"examples\": [{\r",
							"        \"age\": 32,\r",
							"        \"daily_food\": 0.648,\r",
							"        \"daily_sleep\": 135.0,\r",
							"        \"name\": \"Nastya\"\r",
							"    }]\r",
							"}\r",
							"\r",
							"pm.test(\"Проверить структуру json схемы\", function () {\r",
							"      pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"pm.test(\"Проверить коэффициенты умножения weight\", function () {\r",
							"      pm.expect(response.daily_food).to.be.eql(req.weight*0.012);\r",
							"      pm.expect(response.daily_sleep).to.be.eql(req.weight*2.5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "{{weight}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/test_pet_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Resp.\r",
							"// {'name': name,\r",
							"//  'age':age,\r",
							"//  'salary': salary,\r",
							"//  'family':{'children':[['Alex', 24],['Kate', 12]],\r",
							"//  'u_salary_1.5_year': salary * 4}\r",
							"//   }\r",
							"\r",
							"\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let response = pm.response.json()\r",
							"let req = request.data\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"let schema = {\r",
							"    \"$id\": \"http://example.com/example.json\",\r",
							"    \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"family\",\r",
							"        \"name\",\r",
							"        \"salary\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The age Schema\",\r",
							"            \"examples\": [\r",
							"                \"32\"\r",
							"            ]\r",
							"        },\r",
							"        \"family\": {\r",
							"            \"type\": \"object\",\r",
							"            \"default\": {},\r",
							"            \"title\": \"The family Schema\",\r",
							"            \"required\": [\r",
							"                \"children\",\r",
							"                \"u_salary_1_5_year\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                \"children\": {\r",
							"                    \"type\": \"array\",\r",
							"                    \"default\": [],\r",
							"                    \"title\": \"The children Schema\",\r",
							"                    \"items\": {\r",
							"                        \"type\": \"array\",\r",
							"                        \"title\": \"A Schema\",\r",
							"                        \"items\": {\r",
							"                            \"anyOf\": [{\r",
							"                                \"type\": \"string\",\r",
							"                                \"title\": \"A Schema\",\r",
							"                                \"examples\": [\r",
							"                                    \"Alex\",\r",
							"                                    \"Kate\"\r",
							"                                ]\r",
							"                            },\r",
							"                            {\r",
							"                                \"type\": \"integer\",\r",
							"                                \"title\": \"A Schema\",\r",
							"                                \"examples\": [\r",
							"                                    24,\r",
							"                                    12\r",
							"                                ]\r",
							"                            }]\r",
							"                        },\r",
							"                        \"examples\": [\r",
							"                            [\"Alex\",\r",
							"                                24\r",
							"                            ],\r",
							"                            [\"Kate\",\r",
							"                                12\r",
							"                            ]\r",
							"                        ]\r",
							"                    },\r",
							"                    \"examples\": [\r",
							"                        [\r",
							"                            [\"Alex\",\r",
							"                                24\r",
							"                            ],\r",
							"                            [\"Kate\",\r",
							"                                12\r",
							"                            ]\r",
							"                        ]\r",
							"                    ]\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\r",
							"                    \"type\": \"integer\",\r",
							"                    \"default\": 0,\r",
							"                    \"title\": \"The u_salary_1_5_year Schema\",\r",
							"                    \"examples\": [\r",
							"                        24000\r",
							"                    ]\r",
							"                }\r",
							"            },\r",
							"            \"examples\": [{\r",
							"                \"children\": [\r",
							"                    [\"Alex\",\r",
							"                        24\r",
							"                    ],\r",
							"                    [\"Kate\",\r",
							"                        12\r",
							"                    ]\r",
							"                ],\r",
							"                \"u_salary_1_5_year\": 24000\r",
							"            }]\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The name Schema\",\r",
							"            \"examples\": [\r",
							"                \"Nastya\"\r",
							"            ]\r",
							"        },\r",
							"        \"salary\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"default\": 0,\r",
							"            \"title\": \"The salary Schema\",\r",
							"            \"examples\": [\r",
							"                6000\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"examples\": [{\r",
							"        \"age\": \"32\",\r",
							"        \"family\": {\r",
							"            \"children\": [\r",
							"                [\"Alex\",\r",
							"                    24\r",
							"                ],\r",
							"                [\"Kate\",\r",
							"                    12\r",
							"                ]\r",
							"            ],\r",
							"            \"u_salary_1_5_year\": 24000\r",
							"        },\r",
							"        \"name\": \"Nastya\",\r",
							"        \"salary\": 6000\r",
							"    }]\r",
							"}\r",
							"\r",
							"pm.test(\"Проверить структуру json схемы\", function () {\r",
							"      pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// 3) Проверить что занчение поля name = значению переменной name из окружения\r",
							"pm.test(\"Проверить что занчение поля name = значению переменной name из окружения\", function () {\r",
							"    pm.expect(response.name).to.be.eql(pm.environment.get(\"name\"));\r",
							"});\r",
							"// 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"pm.test(\"Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\", function () {\r",
							"    pm.expect(+response.age).to.be.eql(+req.age);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary_1_5}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		}
	]
}